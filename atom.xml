<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eryoung2的个人博客</title>
  
  <subtitle>ErYoung2写字的地方</subtitle>
  <link href="http://eryoung2.github.io/atom.xml" rel="self"/>
  
  <link href="http://eryoung2.github.io/"/>
  <updated>2024-04-28T07:51:10.395Z</updated>
  <id>http://eryoung2.github.io/</id>
  
  <author>
    <name>ErYoung2</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CKS真题 -- 无状态和不可变应用</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-%E6%97%A0%E7%8A%B6%E6%80%81%E5%92%8C%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%BA%94%E7%94%A8/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-%E6%97%A0%E7%8A%B6%E6%80%81%E5%92%8C%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%BA%94%E7%94%A8/</id>
    <published>2024-04-28T07:40:46.000Z</published>
    <updated>2024-04-28T07:51:10.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>检查在namespace development中运行的pod，并删除任何非无状态和非不可变的pod</p><p>名词解释：<br>无状态应用：指应用本身不依赖于持久化的状态数据，没有存储挂载，更强调每个请求的独立性。<br>不可变应用：一旦程序部署完成，其状态不会在运行时被直接修改，更强调pod的稳定性和不变性。</p><p>主要删除的就是两种pod:</p><ol><li>privileged: true的pod # 允许特权的pod</li><li>readOnlyRootFileSystem: false #只读文件系统为false的pod</li><li>有pvc、hostpath挂载的</li><li>ConfigMap、Secret、Download API、emptyDir不算。</li></ol><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><ol><li><p>检查development下所有pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n development</span><br></pre></td></tr></table></figure></li><li><p>挨个检查，如果发现非无状态应用和非不可变应用就删掉。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod xxx -n development -oyaml |grep -E &quot;privileged|readOnlyRootFileSystem&quot; #检查非不可变应用</span><br><span class="line">kubectl get pod xxx -n development -oyaml|grep &quot;persistentvolumeclaim&quot; #检查非无状态应用</span><br><span class="line">kubectl get pod xxx -n development -oyaml|grep &quot;hostpath&quot;</span><br><span class="line"></span><br><span class="line">kubectl delete pod xxx -n development</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;检查在namespace development中运行的pod，并删除任何非无状态和非不可变的pod&lt;/p&gt;
&lt;p&gt;名词解释：&lt;br&gt;无状态</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- ImagePolicyWebhook容器镜像扫描</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-ImagePolicyWebhook%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%89%AB%E6%8F%8F/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-ImagePolicyWebhook%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E6%89%AB%E6%8F%8F/</id>
    <published>2024-04-28T06:51:22.000Z</published>
    <updated>2024-04-28T07:17:43.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>注意：你必须在 cluster 的 master节点上完成整个考题，所有服务和文件都已被准备好并放置在该节点上。<br>给定一个目录 &#x2F;etc&#x2F;kubernetes&#x2F;epconfig中不完整的配置以及具有 HTTPS 端点 <a href="https://acme.local:8082/image_policy">https://acme.local:8082/image_policy</a> 的功能性容器镜像扫描器：<br>    1. 启用必要的插件来创建镜像策略<br>    2. 校验控制配置并将其更改为隐式拒绝（implicit deny）<br>    3. 编辑配置以正确指向提供的 HTTPS 端点<br>最后，通过尝试部署易受攻击的资源 &#x2F;cks&#x2F;img&#x2F;web1.yaml 来测试配置是否有效。<br>你可以在&#x2F;var&#x2F;log&#x2F;imagepolicy&#x2F;roadrunner.log 找到容器镜像扫描仪的日志文件。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><ol><li><p>修改&#x2F;etc&#x2F;kubernetes&#x2F;epconfig&#x2F;admission_configuration.json，将defaultAllow设置为false</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;defaultAllow&quot;:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>修改&#x2F;etc&#x2F;kubernetes&#x2F;epconfig&#x2F;kubeconfig.yml，添加webhook server地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority:</span> <span class="string">/path/to/ca.pem</span>   </span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://acme.local:8082/image_policy</span>  <span class="comment"># 增加该行</span></span><br></pre></td></tr></table></figure></li><li><p>备份配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/opt/backup/16</span></span><br><span class="line"><span class="string">cp</span> <span class="string">-f</span> <span class="string">/etc/kubernetes/manifests/kube-apiserver.yaml</span> <span class="string">/opt/backup/16</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">--enable-admission-plugins=NodeRestriction,ImagePolicyWebhook</span> <span class="comment">#添加ImagePolicyWebhook</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">--admission-control-config-file=/etc/kubernetes/epconfig/admission_configuration.json</span> <span class="comment">#添加配置文件路径</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/kubernetes/epconfig</span> <span class="comment">#添加挂载，具体参考配置文件其他范例</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">epconfig</span></span><br><span class="line">    <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">epconfig</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/etc/kubernetes/epconfig</span></span><br></pre></td></tr></table></figure></li><li><p>重启kubelet并检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure></li><li><p>部署&#x2F;cks&#x2F;img&#x2F;web1.yaml进行测试检查</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">/cks/img/web1.yaml</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#imagepolicywebhook">https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#imagepolicywebhook</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;注意：你必须在 cluster 的 master节点上完成整个考题，所有服务和文件都已被准备好并放置在该节点上。&lt;br&gt;给定一个目录 &amp;#x</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- 启用API server认证</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-%E5%90%AF%E7%94%A8API-server%E8%AE%A4%E8%AF%81/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-%E5%90%AF%E7%94%A8API-server%E8%AE%A4%E8%AF%81/</id>
    <published>2024-04-28T06:45:27.000Z</published>
    <updated>2024-04-28T06:50:47.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>重新配置 cluster 的Kubernetes APl 服务器，以确保只允许经过身份验证和授权的 REST 请求。<br>使用授权模式 Node,RBAC 和准入控制器NodeRestriction。<br>删除用户 system:anonymous 的 ClusterRoleBinding 来进行清理。</p><p>注意：所有 kubectl 配置环境&#x2F;文件也被配置使用未经身份验证和未经授权的访问。 你不必更改它，但请注意，一旦完成 cluster的安全加固， kubectl 的配置将无法工作。 您可以使用位于 cluster 的 master 节点上，cluster 原本的kubectl 配置文件 &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf ，以确保经过身份验证的授权的请求仍然被允许。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><ol><li>备份并修改kube-apiserver配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份</span></span><br><span class="line">mkdir -p /opt/backup/15</span><br><span class="line">cp -f /etc/kubernetes/manifests/kube-apiserver.yaml /opt/backup/15</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">--authorization-mode=Node,RBAC</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">--enable-admission-plugins=NodeRestriction</span> <span class="comment">#添加准入控制器</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>重启kubelet</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure></li><li><p>删除删除用户 system:anonymous 的 ClusterRoleBinding</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete rolebinding system:anonymous</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/node/#overview">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/node/#overview</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;重新配置 cluster 的Kubernetes APl 服务器，以确保只允许经过身份验证和授权的 REST 请求。&lt;br&gt;使用授权模式 N</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- TLS通信增强</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-TLS%E9%80%9A%E4%BF%A1%E5%A2%9E%E5%BC%BA/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-TLS%E9%80%9A%E4%BF%A1%E5%A2%9E%E5%BC%BA/</id>
    <published>2024-04-28T06:24:48.000Z</published>
    <updated>2024-04-28T06:35:47.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>通过TLS加强kube-apiserver安全配置，要求<br>1、kube-apiserver除了VersionTLS13及以上的版本可以使用，其他版本都不允许使用。<br>2、密码套件（Cipher suite）为TLS_AES_128_GCM_SHA256</p><p>通过TLS加强ETCD安全配置，要求<br>1、密码套件（Cipher suite）为TLS_AES_128_GCM_SHA256</p><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><ol><li><p>备份相关配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/backup/14</span><br><span class="line">cp -f /etc/kubernetes/manifests/kube-apiserver.yaml /opt/backup/14</span><br><span class="line">cp -f /etc/kubernetes/manifests/etcd.yaml /opt/backup/14</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kube-apiserver.yaml</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--tls-min-version=VersionTLS13</span> <span class="comment">#任务1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</span> <span class="comment">#任务2</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># etcd.yaml</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">etcd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</span> <span class="comment">#任务3</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>重启kubelet</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure></li><li><p>检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -A #观察kube-apiserver和etcd是否重启</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-apiserver/">https://kubernetes.io/zh-cn/docs/reference/command-line-tools-reference/kube-apiserver/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;通过TLS加强kube-apiserver安全配置，要求&lt;br&gt;1、kube-apiserver除了VersionTLS13及以上的版本可以</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- Container安全上下文</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-Container%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-Container%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2024-04-28T06:20:03.000Z</published>
    <updated>2024-04-28T06:23:44.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>按照如下要求修改sec-ns命名空间里的Deployment secdep<br>1、用ID为30000的用户启动容器（设置用户1D为：30000）<br>2、不允许进程获得超出其父进程的特权（禁止allowPrivilegeEscalation）<br>3、以只读方式加载容器的根文件系统（对根文件的只读权限）</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><ol><li><p>修改deployment secdep，添加配置<br>kubectl edit deploy secdep -n sec-ns</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">securityContext:</span>                        <span class="comment">#增加这两行完成任务1</span></span><br><span class="line">    <span class="attr">runAsUser:</span> <span class="number">30000</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">containers:</span>           </span><br><span class="line">    <span class="attr">securityContext:</span>                      <span class="comment">#增加这三行完成任务2，3</span></span><br><span class="line">      <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">containers:</span>                             <span class="comment">#如果有多个容器，每个容器都要增加这三行</span></span><br><span class="line">    <span class="attr">securityContext:</span></span><br><span class="line">      <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>保存，检查是否添加成功，不成功说明没加对，需要重新添加<br>kubectl -n sec-ns get all</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/security-context/">https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/security-context/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;按照如下要求修改sec-ns命名空间里的Deployment secdep&lt;br&gt;1、用ID为30000的用户启动容器（设置用户1D为：30</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- Sysdig &amp; Falco</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-Sysdig-Falco/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-Sysdig-Falco/</id>
    <published>2024-04-28T06:12:09.000Z</published>
    <updated>2024-04-28T06:17:58.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>使用运行时检测工具来检测 Pod tomcat123 单个容器中频发生成和执行的异常进程。 </p><p>有两种工具可供使用： </p><ul><li>sysdig</li><li>falco<br>注： 这些工具只预装在 cluster 的工作节点node02，不在 master 节点。</li></ul><p>使用工具至少分析 30 秒，使用过滤器检查生成和执行的进程，将事件写到 &#x2F;opt&#x2F;KSR00101&#x2F;incidents&#x2F;summary 文 件中，其中包含检测的事件， 格式如下： [timestamp],[uid],[processName] 保持工具的原始时间戳格式不变。<br>注：确保事件文件存储在集群的工作节点上。</p><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><ol><li><p>找到containerd的sock</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crictl info | grep sock</span><br><span class="line">&quot;containerdEndpoint&quot;: &quot;/run/containerd/containerd.sock&quot;,</span><br></pre></td></tr></table></figure></li><li><p>找到目标container</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl ps|grep tomcat123</span><br></pre></td></tr></table></figure></li><li><p>通过sysdig扫描容器并输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sysdig -l | grep time</span><br><span class="line">sysdig -l | grep uid</span><br><span class="line">sysdig -l | grep proc</span><br><span class="line">sysdig -M 30 -p &quot;%evt.time,%user.name,%proc.name&quot; --cri /run/containerd/containerd.sock container.name=tomcat123 &gt;&gt; /opt/KSR00101/incidents/summary</span><br></pre></td></tr></table></figure></li></ol><p>如果没检测到sysdig，就跑这一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysdig-probe-loader</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;使用运行时检测工具来检测 Pod tomcat123 单个容器中频发生成和执行的异常进程。 &lt;/p&gt;
&lt;p&gt;有两种工具可供使用： &lt;/p&gt;
</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- AppArmor应⽤程序⾏为限制</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-AppArmor%E5%BA%94%E2%BD%A4%E7%A8%8B%E5%BA%8F%E2%BE%8F%E4%B8%BA%E9%99%90%E5%88%B6/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-AppArmor%E5%BA%94%E2%BD%A4%E7%A8%8B%E5%BA%8F%E2%BE%8F%E4%B8%BA%E9%99%90%E5%88%B6/</id>
    <published>2024-04-28T04:30:51.000Z</published>
    <updated>2024-04-28T05:02:26.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>在 cluster 的工作节点上，实施位于 &#x2F;etc&#x2F;apparmor.d&#x2F;nginx_apparmor 的现有 APPArmor配置文件。<br>编辑位于 &#x2F;home&#x2F;candidate&#x2F;KSSH00401&#x2F;nginx-deploy.yaml 的现有清单文件以应用AppArmor 配置文件。 最后，应用清单文件并创建其中指定的 Pod 。</p><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><ol><li><p>在集群所有节点上加载apparmor策略，并检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apparmor_parser /etc/apparmor.d/nginx_apparmor</span><br><span class="line">apparmor_status|grep nginx-profile</span><br></pre></td></tr></table></figure></li><li><p>回到主节点，编辑清单文件，添加配置<br>vim &#x2F;home&#x2F;candidate&#x2F;KSSH00401&#x2F;nginx-deploy.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">annotations:</span> </span><br><span class="line">    <span class="comment"># 从官网复制，注意格式：container.apparmor.security.beta.kubernetes.io/&lt;container_name&gt;: &lt;profile_ref&gt;</span></span><br><span class="line">    <span class="comment"># &lt;container_name&gt; 的名称是配置文件所针对的容器的名称，&lt;profile_def&gt; 则设置要应用的配置文件。 &lt;profile_ref&gt; 可以是以下取值之一：</span></span><br><span class="line">        <span class="comment"># runtime/default 应用运行时的默认配置</span></span><br><span class="line">        <span class="comment"># localhost/&lt;profile_name&gt; 应用在主机上加载的名为 &lt;profile_name&gt; 的配置文件</span></span><br><span class="line">        <span class="comment"># unconfined 表示不加载配置文件</span></span><br><span class="line">    <span class="attr">container.apparmor.security.beta.kubernetes.io/nginx-deploy:</span> <span class="string">localhost/nginx-profile-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">containers:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-deploy</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">   <span class="attr">command:</span> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo &#x27;Hello AppArmor!&#x27; &amp;&amp; sleep 1h&quot;</span> ]</span><br></pre></td></tr></table></figure></li></ol><p>kubectl apply -f &#x2F;home&#x2F;candidate&#x2F;KSSH00401&#x2F;nginx-deploy.yaml</p><ol start="3"><li>检查<br>kubectl get pod<br>kubectl exec nginx-deploy – cat &#x2F;proc&#x2F;1&#x2F;attr&#x2F;current<br>kubectl exec nginx-deploy – touch &#x2F;tmp&#x2F;test</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/zh-cn/docs/tutorials/security/apparmor/">https://kubernetes.io/zh-cn/docs/tutorials/security/apparmor/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;在 cluster 的工作节点上，实施位于 &amp;#x2F;etc&amp;#x2F;apparmor.d&amp;#x2F;nginx_apparmor 的现</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- Trivy 扫描镜像安全漏洞</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-Trivy-%E6%89%AB%E6%8F%8F%E9%95%9C%E5%83%8F%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-Trivy-%E6%89%AB%E6%8F%8F%E9%95%9C%E5%83%8F%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-04-28T04:21:03.000Z</published>
    <updated>2024-04-28T04:27:20.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>使用 Trivy 开源容器扫描器检测 namespace kamino 中 具有严重漏洞的镜像 的 Pod。<br>查找具有 High 或 Critical 严重性漏洞的镜像，并删除使用这些镜像的 Pod 。<br>注意：Trivy 仅安装在 cluster 的 master 节点上， 在工作节点上不可使用。 你必须切换到 cluster 的 master 节点才能使用 Trivy</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><ol><li><p>登录到相应的master节点，查看kamino namespace下的pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh xxx-master</span><br><span class="line">kubectl get pod -n kamino -oyaml|grep &quot;image:&quot;</span><br></pre></td></tr></table></figure></li><li><p>使用Trivy工具挨个扫描，观察是否有HIGH或者CRITICAL（过程有点久，可以在扫描的时候新开一个terminal做其他题目，扫描完毕之后再看）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trivy image -s &quot;HIGH,CRITICAL&quot; xxx|grep -i &quot;Total&quot;</span><br></pre></td></tr></table></figure></li><li><p>删除有HIGH或者CRITICAL漏洞的pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod xxx -n kamino --force</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;使用 Trivy 开源容器扫描器检测 namespace kamino 中 具有严重漏洞的镜像 的 Pod。&lt;br&gt;查找具有 High 或 </summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- 网络策略NetworkPolicy</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5NetworkPolicy/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5NetworkPolicy/</id>
    <published>2024-04-28T04:00:27.000Z</published>
    <updated>2024-04-28T04:20:03.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>创建一个名为 pod-restriction 的 NetworkPolicy 来限制对在 namespace dev-team 中运行的 Pod products-service 的访问。 只允许以下 Pod 连接到 Pod products-service </p><ul><li>namespace qaqa 中的 Pod</li><li>位于任何 namespace，带有标签 environment: testing 的 Pod 注意：确保应用 NetworkPolicy。<br>你可以在 &#x2F;cks&#x2F;net&#x2F;po.yaml 找到一个模板清单文件。</li></ul><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><ol><li><p>检查相关namespace的标签， 没有就打一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查标签</span></span><br><span class="line">kubectl get ns products-service --show-labels</span><br><span class="line">kubectl get ns qaqa --show-labels</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打标签</span></span><br><span class="line">kubectl label ns xxx name=xxx</span><br></pre></td></tr></table></figure></li><li><p>编辑网络策略的yaml文件<br>vim cks-09.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pod-restriction</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dev-team</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">products-service</span> <span class="comment">#目标pod的标签</span></span><br><span class="line">  <span class="attr">policyTypes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ingress</span></span><br><span class="line">  <span class="attr">ingress:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">from:</span> <span class="comment">#第一个from，选中namespace为qaqa的所有pod</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">namespaceSelector:</span></span><br><span class="line">        <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">qaqa</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">from:</span> <span class="comment">#第二个from，选中所有namespace中标签符合enviroment=testing的pod，注意podSelector前面没有横线，表示与namespaceSelector为并列关系。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">namespaceSelector:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">podSelector:</span></span><br><span class="line">        <span class="attr">matchLabels:</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="string">testing</span></span><br></pre></td></tr></table></figure></li><li><p>生效<br>kubectl apply -f cks-09.yaml</p></li><li><p>检查<br>kubectl describe networkpolicy pod-restriction -n dev-team</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/#networkpolicy-resource">https://kubernetes.io/zh/docs/concepts/services-networking/network-policies/#networkpolicy-resource</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;创建一个名为 pod-restriction 的 NetworkPolicy 来限制对在 namespace dev-team 中运行的 P</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- 沙箱运行容器gVisor</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-%E6%B2%99%E7%AE%B1%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8gVisor/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-%E6%B2%99%E7%AE%B1%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8gVisor/</id>
    <published>2024-04-28T03:53:00.000Z</published>
    <updated>2024-04-28T03:57:44.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>使用名为runsc的现有运行时处理程序，创建一个名为untrusted的RuntimeClass。<br>更新namespace server中的所有Pod以在gVisor上运行。<br>您可以在&#x2F;cks&#x2F;gVisor&#x2F;rc.yaml中找到一个模版清单。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><ol><li><p>创建名为untrusted的RuntimeClass<br> vim cks-08.yaml</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">apiVersion:</span> <span class="string">node.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RuntimeClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">untrusted</span></span><br><span class="line"><span class="attr">handler:</span> <span class="string">runsc</span></span><br></pre></td></tr></table></figure><p>kubectl apply -f cks-08.yaml</p></li><li><p>更新namespace server下的所有pod，使其在gVisor下运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n server</span><br><span class="line">kubectl edit pod xxx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在spec下添加runtimeClassName: untrusted</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/zh-cn/docs/concepts/containers/runtime-class/">https://kubernetes.io/zh-cn/docs/concepts/containers/runtime-class/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;使用名为runsc的现有运行时处理程序，创建一个名为untrusted的RuntimeClass。&lt;br&gt;更新namespace serve</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- Dockerfile检测</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-Dockerfile%E6%A3%80%E6%B5%8B/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-Dockerfile%E6%A3%80%E6%B5%8B/</id>
    <published>2024-04-28T03:40:24.000Z</published>
    <updated>2024-04-28T03:52:28.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>分析和编辑给定的Dockerfile &#x2F;cks&#x2F;docker&#x2F;Dockerfile（基于ubuntu:16.04 镜像）， 并修复在文件中拥有的突出的安全&#x2F;最佳实践问题的两个指令。<br>分析和编辑给定的清单文件 &#x2F;cks&#x2F;docker&#x2F;deployment.yaml ， 并修复在文件中拥有突出的安全&#x2F;最佳实践问题的两个字段。<br>注意：请勿添加或删除配置设置；只需修改现有的配置设置让以上两个配置设置都不再有安全&#x2F;最佳实践问题。<br>注意：如果您需要非特权用户来执行任何项目，请使用用户ID 65535 的用户 nobody 。<br>只修改即可，不需要创建。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><ol><li><p>修改Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改基础镜像为题目要求的 ubuntu:16.04</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#仅将CMD上面的USER root修改为USER nobody，不要改其他的USER root。</span></span><br><span class="line"><span class="keyword">USER</span> nobody</span><br></pre></td></tr></table></figure></li><li><p>修改Deployment文件<br>vim &#x2F;cks&#x2F;docker&#x2F;deployment.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在安全内容里删除&#x27;SYS_ADMIN&#x27;；确保securityContext的privileged为False;确保readOnlyFilesystem为True; runAsUser为65535</span></span><br><span class="line"><span class="comment"># 内部的pod标签保持一致，具体参考环境</span></span><br></pre></td></tr></table></figure></li><li><p>修改后无需重启</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/zh/docs/concepts/security/pod-security-standards/#restricted">https://kubernetes.io/zh/docs/concepts/security/pod-security-standards/#restricted</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;分析和编辑给定的Dockerfile &amp;#x2F;cks&amp;#x2F;docker&amp;#x2F;Dockerfile（基于ubuntu:16.0</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- 创建secret</title>
    <link href="http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-%E5%88%9B%E5%BB%BAsecret/"/>
    <id>http://eryoung2.github.io/2024/04/28/CKS%E7%9C%9F%E9%A2%98-%E5%88%9B%E5%BB%BAsecret/</id>
    <published>2024-04-27T16:05:23.000Z</published>
    <updated>2024-04-27T17:06:27.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>在namespace istio-system中获取名为db1-test的现有secret的内容</p><p>将username字段存储在名为&#x2F;cks&#x2F;sec&#x2F;user.txt的文件中，并将password字段存储在名为&#x2F;cks&#x2F;sec&#x2F;pass.txt的文件中。<br>注意：你必须创建以上两个文件，他们还不存在。</p><p>注意：不要在以下步骤中使用&#x2F;修改先前创建的文件，如果需要，可以创建新的临时文件。</p><p>在istio-system namespace中创建一个名为db2-test的新secret,内容如下：<br>username:production-instance<br>password KvLftKgs4aVH</p><p>最后，创建一个新的Pod,它可以通过卷访问secret db2-test:<br>Pod名称secret-pod<br>Namespace istio-system<br>容器名dev-container<br>镜像 nginx<br>卷名secret-volume<br>挂载路径&#x2F;etc&#x2F;secret</p><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><ol><li><p>获取db1-test的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret -n istio-system db1-test -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  password: aGVsbG8=</span><br><span class="line">  username: ZGIx</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: &quot;2022-12-29T08:24:22Z&quot;</span><br><span class="line">  name: db1-test</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  resourceVersion: &quot;252538&quot;</span><br><span class="line">  uid: 1821cc24-a8a1-4a81-ab80-a1a4ad787ccf</span><br><span class="line">type: Opaque</span><br></pre></td></tr></table></figure></li><li><p>解密并存储到目标路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;aGVsbG8=&quot; |base64 -d &gt; /cks/sec/pass.txt</span><br><span class="line">echo &quot;ZGIx&quot; |base64 -d &gt; /cks/sec/user.txt</span><br></pre></td></tr></table></figure></li><li><p>创建新的secret</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret -n istio-system db2-test generic --from-literal=username:production-instance --from-literal=password=KvLftKgs4aVH</span><br></pre></td></tr></table></figure></li><li><p>创建pod，挂载新的secret(vim cks-06.yaml)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">secret-pod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">istio-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dev-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&quot;/etc/secret&quot;</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-volume</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">db2-test</span></span><br></pre></td></tr></table></figure><p>kubectl apply -f cks-06.yaml</p></li><li><p>检查<br>kubectl describe pod secret-pod -n istio-system</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/docs/concepts/configuration/secret/">https://kubernetes.io/docs/concepts/configuration/secret/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;在namespace istio-system中获取名为db1-test的现有secret的内容&lt;/p&gt;
&lt;p&gt;将username字段存储在</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- 日志审计Audit</title>
    <link href="http://eryoung2.github.io/2024/04/27/CKS%E7%9C%9F%E9%A2%98-%E6%97%A5%E5%BF%97%E5%AE%A1%E8%AE%A1Audit/"/>
    <id>http://eryoung2.github.io/2024/04/27/CKS%E7%9C%9F%E9%A2%98-%E6%97%A5%E5%BF%97%E5%AE%A1%E8%AE%A1Audit/</id>
    <published>2024-04-26T18:25:30.000Z</published>
    <updated>2024-04-27T15:52:33.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>在cluster中启用审计日志。为此，请启用日志后端，并确保：</p><p>日志存储在 &#x2F;var&#x2F;log&#x2F;kubernetes&#x2F;audit-logs.txt<br>日志文件能保留 10 天<br>最多保留 2 个旧审计日志文件<br>&#x2F;etc&#x2F;kubernetes&#x2F;logpolicy&#x2F;sample-policy.yaml 提供了基本策略。它仅指定不记录的内容。</p><p>注意：基本策略位于 cluster 的 master 节点上。</p><p>编辑和扩展基本策略以记录：</p><p>RequestResponse 级别的 persistentvolumes 更改<br>namespace front-apps 中 configmaps 更改的请求体<br>Metadata 级别的所有 namespace 中的 ConfigMap 和 Secret 的更改<br>此外，添加一个全方位的规则以在 Metadata 级别记录所有其他请求。</p><p>注意：不要忘记应用修改后的策略。</p><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><ol><li>备份并修改配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh master01</span><br><span class="line">sudo -i</span><br><span class="line">cp /etc/kubernetes/logpolicy/sample-policy.yaml /opt/bak1/</span><br><span class="line">vim /etc/kubernetes/logpolicy/sample-policy.yaml</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">audit.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Policy</span></span><br><span class="line"><span class="attr">omitStages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;RequestReceived&quot;</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">RequestResponse</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>] <span class="comment">#根据题目要求修改，比如题目要求的是namespaces。</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Request</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">resources:</span> [<span class="string">&quot;configmaps&quot;</span>] <span class="comment">#根据题目要求修改，比如题目要求的是persistentvolumes或者pods。</span></span><br><span class="line">    <span class="attr">namespaces:</span> [<span class="string">&quot;front-apps&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Metadata</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">resources:</span> [<span class="string">&quot;secrets&quot;</span>, <span class="string">&quot;configmaps&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">level:</span> <span class="string">Metadata</span></span><br><span class="line">    <span class="attr">omitStages:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;RequestReceived&quot;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>备份并修改配置文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/backup/05</span><br><span class="line">cp -f /etc/kubernetes/manifests/kube-apiserver.yaml /opt/backup/05</span><br><span class="line">vim /etc/kubernetes/manifests/kube-apiserver.yaml</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">container:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">commands:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kube-apiserver</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--audit-log-path=/var/log/kubernetes/audit-logs.txt</span> <span class="comment">#日志文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--audit-log-maxage=10</span> <span class="comment">#文件保留最大日期</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--audit-log-maxbackup=2</span> <span class="comment">#最多保留文件数</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--aufit-policy-file=/etc/kubernetes/logpolicy/sample-policy.yaml</span> <span class="comment">#日志审计配置文件</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">volumeMounts:</span> <span class="comment">#确保volumeMounts和Volumes添加正确，否则kube-apiserver会挂</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/kubernetes/logpolicy/</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">audit</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/log/kubernetes/</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">audit-log</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">audit</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/etc/kubernetes/logpolicy/</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">audit-log</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/var/log/kubernetes/</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>重启kubelet</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure></li><li><p>检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/log/kubernetes/audit-log.txt</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/">https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;在cluster中启用审计日志。为此，请启用日志后端，并确保：&lt;/p&gt;
&lt;p&gt;日志存储在 &amp;#x2F;var&amp;#x2F;log&amp;#x2F;k</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- RBAC Rolebinding</title>
    <link href="http://eryoung2.github.io/2024/04/27/CKS%E7%9C%9F%E9%A2%98-RBAC-Rolebinding/"/>
    <id>http://eryoung2.github.io/2024/04/27/CKS%E7%9C%9F%E9%A2%98-RBAC-Rolebinding/</id>
    <published>2024-04-26T18:14:55.000Z</published>
    <updated>2024-04-26T18:24:11.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>一个名为web-pod的现有Pod已在namespace db中运行。<br>编辑绑定到Pod的ServiceAccount service-account-web的现有Role,仅允许只对services类型的资源执行get操作。<br>在namespace db中创建一个名为role-2,并仅允许只对namespaces类型的资源执行delete操作的新Role。<br>创建一个名为role-2-binding的新RoleBinding,将新创建的Role绑定到Pod的ServiceAccount。<br>注意：请勿删除现有的RoleBinding。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><ol><li>修改role-1<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod web-pod -n db -oyaml # 查看role和serviceaccount</span><br><span class="line">kubectl -n db edit role role-1</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2022-12-28T07:48:59Z&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">role-1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">db</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;224470&quot;</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">3406bbfb-25aa-4930-ab29-9abad1e1de77</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">services</span>                        <span class="comment">#按题目要求修改此处</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span>                             <span class="comment">#按题目要求修改此处</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建role-2<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create role role-2 -n db --verb=delete --resource=namespaces</span><br><span class="line">kubectl create rolebinding role-2-binding -n db --role=role-2 --serviceaccount=db:service-account-web</span><br><span class="line">kubectl describe rolebinding role-2-binding -n db</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/rbac/</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;一个名为web-pod的现有Pod已在namespace db中运行。&lt;br&gt;编辑绑定到Pod的ServiceAccount service</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- 默认网络策略</title>
    <link href="http://eryoung2.github.io/2024/04/27/CKS%E7%9C%9F%E9%A2%98-%E9%BB%98%E8%AE%A4%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5/"/>
    <id>http://eryoung2.github.io/2024/04/27/CKS%E7%9C%9F%E9%A2%98-%E9%BB%98%E8%AE%A4%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5/</id>
    <published>2024-04-26T17:42:42.000Z</published>
    <updated>2024-04-26T17:46:52.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>为所有类型为Ingress-+Egress的流量在namespace testing中创建一个名为denypolicy的新默认拒绝NetworkPolicy。<br>此新的NetworkPolicy必须拒绝namespace testing中的所有的Ingress+Egress流量。<br>将新创建的默认拒绝NetworkPolicy应用与在namespace testing中运行的所有Pod。</p><p>你可以在&#x2F;cks&#x2F;net&#x2F;p1.yaml找到一个模板清单文件。</p><h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /cks/net/p1.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">denypolicy</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">testing</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podSelector:</span> &#123;&#125;                        <span class="comment">#拒绝所有pod</span></span><br><span class="line">  <span class="attr">policyTypes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Ingress</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Egress</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f /cks/net/p1.yaml</span><br></pre></td></tr></table></figure><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe networkpolicy denypolicy -n testing</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/zh-cn/docs/concepts/services-networking/network-policies/#default-deny-all-ingress-traffic">https://kubernetes.io/zh-cn/docs/concepts/services-networking/network-policies/#default-deny-all-ingress-traffic</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;为所有类型为Ingress-+Egress的流量在namespace testing中创建一个名为denypolicy的新默认拒绝Netwo</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- Pod指定ServiceAccount</title>
    <link href="http://eryoung2.github.io/2024/04/27/CKS%E7%9C%9F%E9%A2%98-Pod%E6%8C%87%E5%AE%9AServiceAccount/"/>
    <id>http://eryoung2.github.io/2024/04/27/CKS%E7%9C%9F%E9%A2%98-Pod%E6%8C%87%E5%AE%9AServiceAccount/</id>
    <published>2024-04-26T17:31:17.000Z</published>
    <updated>2024-04-26T17:43:28.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>清单文件&#x2F;cks&#x2F;sa&#x2F;pod1.yaml中指定的Pod由于ServiceAccount指定错误而无法调度。<br>请完成一下项目：</p><p>Task<br>1.在现有namespace ga中创建一个名为backend-sa的新ServiceAccount,<br>确保此ServiceAccount不自动挂载API凭据。<br>2.使用&#x2F;cks&#x2F;sa&#x2F;pod1.yaml中的清单文件来创建一个Pod。<br>3.最后，清理namespace ga中任何未使用的ServiceAccount。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>vim cks-02.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backend-sa</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">qa</span></span><br><span class="line"><span class="attr">automountServiceAccountToken:</span> <span class="literal">false</span> <span class="comment">#添加这一行</span></span><br></pre></td></tr></table></figure><p>vim &#x2F;cks&#x2F;sa&#x2F;pod1.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backend</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">qa</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceAccountName:</span> <span class="string">backend-sa</span>                  <span class="comment">#给pod配置serviceaccount</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">backend</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f /cks/sa/pod1.yaml</span><br><span class="line"></span><br><span class="line">kubectl get sa -n qa</span><br><span class="line">kubectl get pod -n qa|grep -i &quot;serviceaccount&quot;</span><br><span class="line">kubectl -n qa delete xxx #没见到的serviceaccount</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting">https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#opt-out-of-api-credential-automounting</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;清单文件&amp;#x2F;cks&amp;#x2F;sa&amp;#x2F;pod1.yaml中指定的Pod由于ServiceAccount指定错误而无法调度。&lt;</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>CKS真题 -- kube-bench修复不安全项</title>
    <link href="http://eryoung2.github.io/2024/04/27/CKS%E7%9C%9F%E9%A2%98-kube-bench%E4%BF%AE%E5%A4%8D%E4%B8%8D%E5%AE%89%E5%85%A8%E9%A1%B9/"/>
    <id>http://eryoung2.github.io/2024/04/27/CKS%E7%9C%9F%E9%A2%98-kube-bench%E4%BF%AE%E5%A4%8D%E4%B8%8D%E5%AE%89%E5%85%A8%E9%A1%B9/</id>
    <published>2024-04-26T17:05:49.000Z</published>
    <updated>2024-04-26T17:26:29.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>通过配置修复所有问题并重新启动受影响的组件以确保新的设置生效。</p><p>修复针对 API 服务器发现的所有以下违规行为：<br>1.2.7 Ensure that the –authorization-mode argument is not set to AlwaysAllow FAIL<br>1.2.8 Ensure that the –authorization-mode argument includes Node FAIL<br>1.2.9 Ensure that the –authorization-mode argument includes RBAC FAIL<br>1.2.18 Ensure that the –insecure-bind-address argument is not set FAIL （1.25中这项题目没给出，但最好也检查一下，模拟环境里需要改）<br>~~1.2.19 Ensure that the –insecure-port argument is set to 0 FAIL ~~（1.25中这项题目没给出，不需要再修改了）</p><p>修复针对kubelet发现的所有以下违规行为：<br>Fix all of the following violations that were found against the kubelet:<br>4.2.1 Ensure that the anonymous-auth argument is set to false FAIL<br>4.2.2 Ensure that the –authorization-mode argument is not set to AlwaysAllow FAIL<br>注意：尽可能使用 Webhook 身份验证&#x2F;授权。</p><p>修复针对etcd发现的所有以下违规行为：<br>Fix all of the following violations that were found against etcd:<br>2.2 Ensure that the –client-cert-auth argument is set to true FAIL</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><ol><li><p>备份文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/backup/01</span><br><span class="line">cp -f /etc/kubernetes/manifests/kube-apiserver.yaml /opt/backup/01</span><br><span class="line">cp -f /etc/kubernetes/manifests/etcd.yaml /opt/backup/01</span><br><span class="line">cp -f /var/lib/kubelet/config.yaml /opt/backup/01</span><br></pre></td></tr></table></figure></li><li><p>检查master的不安全项并修改<br>ssh hk8s-master<br>sudo kube-bench master<br>vim &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">--authencation-mode=Node,RBAC</span> </span><br></pre></td></tr></table></figure></li></ol><p>vim &#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;etcd.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">--client-cert-auth=true</span></span><br></pre></td></tr></table></figure><p>vim &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">authentication:</span></span><br><span class="line">   <span class="attr">anonymous:</span></span><br><span class="line">     <span class="attr">enabled:</span> <span class="literal">false</span>     <span class="comment">#true修改成false</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">authorization:</span></span><br><span class="line">   <span class="attr">mode:</span> <span class="string">Webhook</span>        <span class="comment">#把AlwaysAllow修改成Webhook</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>检查node的不安全项并修改，同master</p></li><li><p>重启kubelet</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;通过配置修复所有问题并重新启动受影响的组件以确保新的设置生效。&lt;/p&gt;
&lt;p&gt;修复针对 API 服务器发现的所有以下违规行为：&lt;br&gt;1.2</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cks" scheme="http://eryoung2.github.io/tags/cks/"/>
    
  </entry>
  
  <entry>
    <title>cka真题</title>
    <link href="http://eryoung2.github.io/2024/04/02/cka%E7%9C%9F%E9%A2%98/"/>
    <id>http://eryoung2.github.io/2024/04/02/cka%E7%9C%9F%E9%A2%98/</id>
    <published>2024-04-01T18:01:18.000Z</published>
    <updated>2024-04-01T18:02:17.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Part1-17个题目"><a href="#Part1-17个题目" class="headerlink" title="Part1 17个题目"></a>Part1 17个题目</h2><p>第1题.基于角色的访问控制-RBAC<br>第2题.节点维护—指定node节点不可用<br>第3题.K8s版本升级<br>第4题.Etcd数据库备份恢复<br>第5题.网络策略NetworkPolicy<br>第6题.四层负载均衡service<br>第7题.七层负载均衡Ingress<br>第8题.Deployment管理pod扩缩容<br>第9题.pod指定节点部署<br>第10题.检查Node节点的健康状态<br>第11题.一个Pod封装多个容器<br>第12题.持久化存储卷PersistentVolume<br>第13题.PersistentVolumeClaim<br>第14题.监控Pod日志<br>第15题.Sidecar代理<br>第16题.监控Pod度量指标<br>第17题.集群故障排查——kubelet故障</p><h2 id="Part2-准备"><a href="#Part2-准备" class="headerlink" title="Part2 准备"></a>Part2 准备</h2><p>vim ~&#x2F;.bashrc<br>alias k&#x3D;”kubectl”<br>export drc&#x3D;”–dry-run&#x3D;client -oyaml”<br>export now&#x3D;”–force –grace-period 0”<br>source ~&#x2F;.bashrc</p><h2 id="Part3-解题"><a href="#Part3-解题" class="headerlink" title="Part3 解题"></a>Part3 解题</h2><h3 id="1-RBAC-4分"><a href="#1-RBAC-4分" class="headerlink" title="1. RBAC(4分)"></a>1. RBAC(4分)</h3><p>中文解释：<br>创建一个名为deployment-clusterrole的clusterrole，该clusterrole只允许创建Deployment、Daemonset、Statefulset的create操作<br>在名字为app-team1的namespace下创建一个名为cicd-token的serviceAccount，并且将上一步创建clusterrole的权限绑定到该serviceAccount</p><p>解法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k create clusterrole deployment-clusterrole --verb=create --resource=deployments,daemonsets,statefulsets</span><br><span class="line">k create serviceaccount cicd-token -n app-team1</span><br><span class="line">k create rolebinding role-account-binding --clusterrole=deployment-clusterrole --serviceaccount=app-tema1:cicd-token -n app-team1</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl auth can-i create deployment --as system:serviceaccount:app-team1:cicd-token -n app-team1 -- <span class="built_in">yes</span></span><br><span class="line">kubectl auth can-i create daemonset --as system:serviceaccount:app-team1:cicd-token -n app-team1  -- <span class="built_in">yes</span></span><br><span class="line">kubectl auth can-i create statefulset --as system:serviceaccount:app-team1:cicd-token -n app-team1 -- <span class="built_in">yes</span></span><br><span class="line">kubectl auth can-i create pod --as system:serviceaccount:app-team1:cicd-token -n app-team1 -- no</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">https://kubernetes.io/docs/reference/access-authn-authz/rbac/</a><br><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-service-account/">https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-service-account/</a></p><h3 id="2-节点维护（4分）"><a href="#2-节点维护（4分）" class="headerlink" title="2. 节点维护（4分）"></a>2. 节点维护（4分）</h3><p>将ek8s-node-1节点设置为不可用，然后重新调度该节点上的所有Pod</p><p>解法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl config use-context ek8s</span><br><span class="line">k cordon ek8s-node-1</span><br><span class="line">k drain ek8s-node-1 --ignore-daesonsets --delete-emptydir-data --force</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/">https://kubernetes.io/zh/docs/tasks/configure-pod-container/</a><br><a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/">https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/</a><br><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#drain">https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#drain</a></p><h3 id="3-K8s升级版本（7分）"><a href="#3-K8s升级版本（7分）" class="headerlink" title="3. K8s升级版本（7分）"></a>3. K8s升级版本（7分）</h3><p>将master节点升级到v1.29.00，不升级相关组件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">kubectl cordon k8s-master01</span><br><span class="line">kubectl drain k8s-master01 --ignore-daemonsets --delete-emptydir-data --force</span><br><span class="line"></span><br><span class="line">ssh k8s-master01</span><br><span class="line">sudo -i</span><br><span class="line">apt update -y &amp;&amp;  apt-cache madison kubeadm</span><br><span class="line">apt-mark unhold kubeadm &amp;&amp; \</span><br><span class="line">apt-get update &amp;&amp; sudo apt-get install -y kubeadm=<span class="string">&#x27;1.29.x-*&#x27;</span> &amp;&amp; \</span><br><span class="line">apt-mark hold kubeadm</span><br><span class="line"></span><br><span class="line">kubeadm version</span><br><span class="line">kubeadm upgrade plan --etcd-upgrade=<span class="literal">false</span> </span><br><span class="line">kubeadm upgrade apply v1.29.x</span><br><span class="line"></span><br><span class="line">apt-mark unhold kubelet kubectl &amp;&amp; \</span><br><span class="line">apt-get update &amp;&amp; sudo apt-get install -y kubelet=<span class="string">&#x27;1.29.x-*&#x27;</span> kubectl=<span class="string">&#x27;1.29.x-*&#x27;</span> &amp;&amp; \</span><br><span class="line">apt-mark hold kubelet kubectl</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">kubectl uncordon k8s-master01</span><br></pre></td></tr></table></figure><h3 id="4-etcd备份与恢复（7分）"><a href="#4-etcd备份与恢复（7分）" class="headerlink" title="4. etcd备份与恢复（7分）"></a>4. etcd备份与恢复（7分）</h3><p>针对etcd实例<a href="https://127.0.0.1:2379创建一个快照，保存到">https://127.0.0.1:2379创建一个快照，保存到</a> &#x2F;srv&#x2F;data&#x2F;etcd-snapshot.db。在创建快照的过程中，如果卡住了，就键入ctrl+c终止，然后重试。<br>然后恢复一个已经存在的快照：&#x2F;var&#x2F;lib&#x2F;backup&#x2F;etcd-snapshot-previous.db<br>执行etcdctl命令的证书存放在：<br>ca证书：&#x2F;opt&#x2F;KUIN00601&#x2F;ca.crt<br>客户端证书：&#x2F;opt&#x2F;KUIN00601&#x2F;etcd-client.crt<br>客户端密钥：&#x2F;opt&#x2F;KUIN00601&#x2F;etcd-client.key</p><p>解法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#备份</span></span><br><span class="line">ETCDCTL_API=3 etcdctl --endpoints=<span class="string">&quot;https://127.0.0.1:2379&quot;</span> --cacert=/opt/KUIN00601/ca.crt --cert=/opt/KUIN00601/etcd-client.crt --key=/opt/KUIN00601/etcd-client.key snapshot save /srv/data/etcd-snapshot.db</span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复(如果恢复后集群崩掉，可以跳过)</span></span><br><span class="line">systemctl stop etcd</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/etcd-backup</span><br><span class="line"><span class="built_in">mv</span> /etc/kubernetes/manifests/kube-* /opt/etcd-backup/</span><br><span class="line">ETCDCTL_API=3 etcdctl --endpoints=<span class="string">&quot;https://127.0.0.1:2379&quot;</span> --cacert=/opt/KUIN00601/ca.crt --cert=/opt/KUIN00601/etcd-client.crt --key=/opt/KUIN00601/etcd-client.key snapshot restore /var/lib/backup/etcd-snapshot-previous.db --data-dir=/var/lib/backup/</span><br><span class="line">vim /etc/kubernetes/manifests/etcd.yaml, change volume from /var/lib/etcd/ to /var/lib/backup</span><br><span class="line"><span class="built_in">chown</span> -R etcd:etcd /var/lib/backup</span><br><span class="line"><span class="built_in">mv</span> /opt/etcd-backup/ /etc/kubernetes/manifests/</span><br><span class="line">systemctl restart etcd</span><br></pre></td></tr></table></figure><h3 id="5-NetworkPolicy（7分）"><a href="#5-NetworkPolicy（7分）" class="headerlink" title="5. NetworkPolicy（7分）"></a>5. NetworkPolicy（7分）</h3><p>创建一个名字为allow-port-from-namespace的NetworkPolicy，这个NetworkPolicy允许internal命名空间下的Pod访问该命名空间下的9000端口。<br>并且不允许不是internal命令空间的下的Pod访问<br>不允许访问没有监听9000端口的Pod。</p><p>解法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vim 5.yaml</span><br><span class="line">-----------------</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: allow-port-from-namespace</span><br><span class="line">  namespace: internal</span><br><span class="line">spec:</span><br><span class="line">  podSelector: &#123;&#125;</span><br><span class="line">  policyTypes:</span><br><span class="line">  - Ingress</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    - podSelector: &#123;&#125;</span><br><span class="line">    ports:</span><br><span class="line">    - port: 9000</span><br><span class="line">      protocol: TCP</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">k apply -f 5.yaml</span><br></pre></td></tr></table></figure><h3 id="6-service（7分）"><a href="#6-service（7分）" class="headerlink" title="6. service（7分）"></a>6. service（7分）</h3><p>重新配置一个已经存在的deployment front-end，在名字为nginx的容器里面添加一个端口配置，名字为http，暴露端口号为80&#x2F;TCP，然后创建一个service，名字为front-end-svc，暴露该deployment的http端口，并且service的类型为NodePort。</p><p>解法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Add config into existing deployment front-end</span><br><span class="line">k edit deployment front-end</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        <span class="comment"># 需要加这四行</span></span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          protocol: TCP</span><br><span class="line"></span><br><span class="line">k expose deploy front-end --name=front-end-svc --port=80 --<span class="built_in">type</span>=NodePort --target-port=http</span><br></pre></td></tr></table></figure><h3 id="7-Ingress-7分"><a href="#7-Ingress-7分" class="headerlink" title="7. Ingress(7分)"></a>7. Ingress(7分)</h3><p>在ing-internal 命名空间下创建一个ingress，名字为pong，代理的service hi，端口为5678，配置路径&#x2F;hi。<br>验证：访问curl -kL <INTERNAL_IP>&#x2F;hi会返回hi。</p><p>解法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">vim 7-ing-class.yaml</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: IngressClass</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/component: controller</span><br><span class="line">  name: nginx-example</span><br><span class="line">  annotations:</span><br><span class="line">    ingressclass.kubernetes.io/is-default-class: <span class="string">&quot;true&quot;</span></span><br><span class="line">spec:</span><br><span class="line">  controller: k8s.io/ingress-nginx</span><br><span class="line"></span><br><span class="line">vim 7-ing.yaml</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: pong</span><br><span class="line">  namespace: ing-internal</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io  <span class="comment">#如果ing没有internal ip，就添加这一行</span></span><br><span class="line">    nginx.ingress.kubernetes.io/rewrite-target: /</span><br><span class="line">spec:</span><br><span class="line">  ingressClassName: nginx</span><br><span class="line">  rules:</span><br><span class="line">  - http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /hi</span><br><span class="line">        pathType: Prefix</span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: hi</span><br><span class="line">            port:</span><br><span class="line">              number: 5678</span><br><span class="line"></span><br><span class="line">k apply -f 7-ing.yaml</span><br><span class="line">curl -kL &lt;internal-ip&gt;/hi</span><br></pre></td></tr></table></figure><h3 id="8-Deployment缩扩容-4分"><a href="#8-Deployment缩扩容-4分" class="headerlink" title="8. Deployment缩扩容(4分)"></a>8. Deployment缩扩容(4分)</h3><p>扩容名字为loadbalancer的deployment的副本数为6</p><p>解法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl config use-context k8s</span><br><span class="line">k scale --replicas=6 deployment loadbalancer</span><br></pre></td></tr></table></figure><h3 id="9-指定节点部署（4分）"><a href="#9-指定节点部署（4分）" class="headerlink" title="9. 指定节点部署（4分）"></a>9. 指定节点部署（4分）</h3><p>创建一个Pod，名字为nginx-kusc00401，镜像地址是nginx，调度到具有disk&#x3D;spinning标签的节点上</p><p>解法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">k run nginx-kusc00401 --image=nginx <span class="variable">$drc</span> &gt; 9.yaml</span><br><span class="line">vim 9.yaml</span><br><span class="line">vim pod-ns.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-kusc00401</span><br><span class="line">  labels:</span><br><span class="line">    role: nginx-kusc00401</span><br><span class="line">spec:</span><br><span class="line">  nodeSelector:   <span class="comment">#添加nodeSelector标签，在spec下面，没有就打标签</span></span><br><span class="line">    disk: spinning</span><br><span class="line">  containers:</span><br><span class="line">    - name: nginx</span><br><span class="line">      image: nginx</span><br><span class="line"></span><br><span class="line">k apply -f 9.yaml</span><br></pre></td></tr></table></figure><h3 id="10-检查node节点健康状态（4分）"><a href="#10-检查node节点健康状态（4分）" class="headerlink" title="10. 检查node节点健康状态（4分）"></a>10. 检查node节点健康状态（4分）</h3><p>检查集群中有多少节点为Ready状态，并且去除包含NoSchedule污点的节点。之后将数字写到&#x2F;opt&#x2F;KUSC00402&#x2F;kusc00402.txt</p><p>解法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl config use-context k8s</span><br><span class="line">k get nodes|grep -v &quot;Taint&quot;|grep -v &quot;Noschedule&quot;|wc -l &gt; /opt/KUSC00402/kusc00402.txt</span><br></pre></td></tr></table></figure><h3 id="11-一个pod多个容器-4分"><a href="#11-一个pod多个容器-4分" class="headerlink" title="11. 一个pod多个容器(4分)"></a>11. 一个pod多个容器(4分)</h3><p>创建一个Pod，名字为kucc1，这个Pod可能包含1-4容器，该题为四个：nginx+redis+memcached+consul</p><p>解法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">k run kucc1 --image=nginx <span class="variable">$drc</span> &gt; 11.yaml</span><br><span class="line">然后补全所有容器信息，最后apply</span><br><span class="line">k apply -f 11.yaml</span><br></pre></td></tr></table></figure><h3 id="12-Persistent-Volume-4分"><a href="#12-Persistent-Volume-4分" class="headerlink" title="12. Persistent Volume(4分)"></a>12. Persistent Volume(4分)</h3><p>创建一个pv，名字为app-config，大小为2Gi，访问权限为ReadWriteMany。Volume的类型为hostPath，路径为&#x2F;srv&#x2F;app-config</p><p>解法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: app-config</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">local</span></span><br><span class="line">spec:</span><br><span class="line">  storageClassName: manual   <span class="comment"># 需要有这一项吗？题目没有要求，（可以不写）</span></span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 2Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  hostPath:</span><br><span class="line">    path: <span class="string">&quot;/srv/app-config&quot;</span></span><br><span class="line"></span><br><span class="line">k apply -f 12.yaml</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/</a><br><a href="https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/">https://kubernetes.io/zh-cn/docs/concepts/storage/persistent-volumes/</a><br>可以ctrl+F 搜003，会直接跳转到创建pv<br><a href="https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume">https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolume</a></p><h3 id="13-监控Pod度量指标（5分）"><a href="#13-监控Pod度量指标（5分）" class="headerlink" title="13. 监控Pod度量指标（5分）"></a>13. 监控Pod度量指标（5分）</h3><p>找出具有name&#x3D;cpu-user的Pod，并过滤出使用CPU最高的Pod，然后把它的名字写在已经存在的 &#x2F;opt&#x2F;KUTR00401&#x2F;KUTR00401.txt文件里（注意他没有说指定namespace。所以需要使用-A指定所以namespace）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">k config use-context k8s</span><br><span class="line">k top pod -A -l name=cpu-user</span><br><span class="line">NAMESPACE     NAME                       CPU(cores)   MEMORY(bytes)   </span><br><span class="line">kube-system   coredns-54d67798b7-hl8xc   7m           8Mi   </span><br><span class="line">kube-system   coredns-54d67798b7-m4m2q   6m           8Mi</span><br><span class="line"></span><br><span class="line">k <span class="string">&quot;coredns-54d67798b7-hl8xc&quot;</span> &gt; /opt/KUTR00401/KUTR00401.txt</span><br></pre></td></tr></table></figure><h3 id="14-监控pod日志（5分）"><a href="#14-监控pod日志（5分）" class="headerlink" title="14. 监控pod日志（5分）"></a>14. 监控pod日志（5分）</h3><p>监控名为foobar的Pod的日志，并过滤出具有unable-access-website信息的行，然后将写入到 &#x2F;opt&#x2F;KUTR00101&#x2F;foobar</p><p>解法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k logs foobar|grep unable-access-website &gt; /opt/KUTR00101/foobar</span><br></pre></td></tr></table></figure><h3 id="15-CSI和PVC"><a href="#15-CSI和PVC" class="headerlink" title="15. CSI和PVC"></a>15. CSI和PVC</h3><p>创建一个名字为pv-volume的pvc，指定storageClass为csi-hostpath-sc，大小为10Mi<br>然后创建一个Pod，名字为web-server，镜像为nginx，并且挂载该PVC至&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html，挂载的权限为ReadWriteOnce。之后通过 kubectl edit或者 kubectl path将pvc改成70Mi，并且记录修改记录。</p><p>解法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">vim 15-pvc.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: pv-volume</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 10Mi</span><br><span class="line">  storageClassName: csi-hostpath-sc</span><br><span class="line"></span><br><span class="line">k apply -f 15-pvc.yaml</span><br><span class="line"></span><br><span class="line">vim 15-pod.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pv-volume</span><br><span class="line">spec:</span><br><span class="line">  volumes:</span><br><span class="line">    - name: pv-volume</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: pv-volume</span><br><span class="line">  containers:</span><br><span class="line">    - name: web-server</span><br><span class="line">      image: nginx</span><br><span class="line">      volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">&quot;/usr/share/nginx/html&quot;</span></span><br><span class="line">          name: pv-volume</span><br><span class="line"></span><br><span class="line">k apply -f 15-pod.yaml</span><br><span class="line"></span><br><span class="line">kubectl edit pvc pv-volume</span><br><span class="line">kubectl edit pvc pv-volume --record</span><br><span class="line">kubectl edit pvc pv-volume --save-config</span><br></pre></td></tr></table></figure><h3 id="16-sidecar-7分"><a href="#16-sidecar-7分" class="headerlink" title="16. sidecar(7分)"></a>16. sidecar(7分)</h3><p>添加一个名为busybox且镜像为busybox的sidecar到一个已经存在的名为legacy-app的Pod上，这个sidecar的启动命令为 &#x2F;bin&#x2F;sh, -c, ‘tail -n+1 -f &#x2F;var&#x2F;log&#x2F;legacy-app.log’。<br>并且这个sidecar和原有的镜像挂载一个名为logs的volume，挂载的目录为&#x2F;var&#x2F;log&#x2F;。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">k get pod legacy-app -o yaml &gt; c-sidecar.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: legacy-app</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: count</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - &gt;</span><br><span class="line">      i=0;</span><br><span class="line">      <span class="keyword">while</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span> INFO <span class="variable">$i</span>&quot;</span> &gt;&gt; /var/log/legacy-ap.log;</span><br><span class="line">        i=$((i+<span class="number">1</span>));</span><br><span class="line">        <span class="built_in">sleep</span> 1;</span><br><span class="line">      <span class="keyword">done</span></span><br><span class="line">      <span class="comment"># 以下为添加部分</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: logs</span><br><span class="line">      mountPath: /var/log</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: busybox</span><br><span class="line">    args: [/bin/sh, -c, <span class="string">&#x27;tail -n+1 -f /var/log/legacy-ap.log&#x27;</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: logs</span><br><span class="line">      mountPath: /var/log</span><br><span class="line">  volumes:</span><br><span class="line">  - name: logs</span><br><span class="line">    emptyDir: &#123;&#125;</span><br><span class="line"></span><br><span class="line">k delete -f c-sidecar.yaml</span><br><span class="line">k create -f c-sidecar.yaml</span><br></pre></td></tr></table></figure><h3 id="17-kubelet故障（13分）"><a href="#17-kubelet故障（13分）" class="headerlink" title="17. kubelet故障（13分）"></a>17. kubelet故障（13分）</h3><p>一个名为wk8s-node-0的节点状态为NotReady，让其他恢复至正常状态，并确认所有的更改开机自动完成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh wk8s-node-0</span><br><span class="line">k get nodes</span><br><span class="line">systemctl status kubelet <span class="comment"># 然后fix</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Part1-17个题目&quot;&gt;&lt;a href=&quot;#Part1-17个题目&quot; class=&quot;headerlink&quot; title=&quot;Part1 17个题目&quot;&gt;&lt;/a&gt;Part1 17个题目&lt;/h2&gt;&lt;p&gt;第1题.基于角色的访问控制-RBAC&lt;br&gt;第2题.节点维护—指定n</summary>
      
    
    
    
    <category term="考试" scheme="http://eryoung2.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
    <category term="cka" scheme="http://eryoung2.github.io/tags/cka/"/>
    
  </entry>
  
  <entry>
    <title>Macbook Air去掉刘海</title>
    <link href="http://eryoung2.github.io/2024/03/11/Macbook-Air%E5%8E%BB%E6%8E%89%E5%88%98%E6%B5%B7/"/>
    <id>http://eryoung2.github.io/2024/03/11/Macbook-Air%E5%8E%BB%E6%8E%89%E5%88%98%E6%B5%B7/</id>
    <published>2024-03-11T14:20:01.000Z</published>
    <updated>2024-03-12T02:20:16.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想买一台新电脑，最终选中了Macbook Air M2版本，主要是使用强度并不大，而且我也很想加入星巴克气氛组，于是选择了它。<br>也是因为它相比新发布的M3 Macbook Air来说，性价比还是高一些，再加上走的是官翻+24期免息，可以说非常满意了。</p><p>但是很不爽的是，它有刘海，这就让人很不爽了。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>但好在我们还是有办法去消除刘海，可以使用TopNorch Mac这款软件来做。</p><p>我们去到官方网站，然后下载软件：<br><a href="https://topnotch.app/">https://topnotch.app/</a></p><p>此软件是免费的，下载下来进行安装，然后打开即可。</p><p><img src="https://raw.githubusercontent.com/ErYoung2/imgbed/master/2024/03/11-22-28-33-WX20240311-222607%402x.png"></p><p>同时，它还可以去掉圆角，可以说非常方便了。</p><p>就可以了，非常简单。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近想买一台新电脑，最终选中了Macbook Air M2版本，主要是使用强度并不大，而且我也很想加入星巴克气氛组，于是选择了它。&lt;br&gt;也</summary>
      
    
    
    
    <category term="操作系统" scheme="http://eryoung2.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Mac" scheme="http://eryoung2.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>《后来的我们》- 五月天</title>
    <link href="http://eryoung2.github.io/2024/01/20/%E3%80%8A%E5%90%8E%E6%9D%A5%E7%9A%84%E6%88%91%E4%BB%AC%E3%80%8B-%E4%BA%94%E6%9C%88%E5%A4%A9/"/>
    <id>http://eryoung2.github.io/2024/01/20/%E3%80%8A%E5%90%8E%E6%9D%A5%E7%9A%84%E6%88%91%E4%BB%AC%E3%80%8B-%E4%BA%94%E6%9C%88%E5%A4%A9/</id>
    <published>2024-01-20T11:09:32.000Z</published>
    <updated>2024-01-20T11:24:19.318Z</updated>
    
    <content type="html"><![CDATA[<p>然后呢，他们说你的心，似乎痊愈了，<br>也开始有个人，为你守护着，<br>我该心安还是心痛呢？</p><p>然后呢，其实我的日子也还可以呢，<br>除了回忆肆虐的某些时刻，<br>庆幸还有眼泪冲淡苦涩。</p><p>而那些昨日，依然缤纷着，<br>它们都有我，细心收藏着，<br>也许你还记得，也许你都忘了，<br>也不是那么，重要了。</p><p>只期待，后来的你，能快乐，<br>那就是，后来的我，最想的。<br>后来的我们，依然走着，只是不再并肩了，<br>朝各自的人生，追寻了。</p><p>无论是，后来故事，怎么了，<br>也要让，后来人生，精彩着。<br>后来的人生，我期待着，<br>泪水中能看到，你真的，自由了。</p><p>亲爱的，回忆我们共同走过的曲折，<br>是那些带我们来到了这一刻，<br>让珍贵的人生，有失有得。</p><p>用新的幸福，把遗憾包着，<br>就这么朝着未来，前进了。<br>有再多的不舍，也要狠心割舍，<br>别回头看我，亲爱的。</p><p>只期待，后来的你，能快乐，<br>那就是，后来的我，最想的。<br>后来的我们依然走着，只是不再并肩了，<br>想各自的人生，追寻了。</p><p>无论是后来故事，怎么了，<br>也要让后来人生，精彩着。<br>后来的我们，我期待着，<br>泪水中能看到，你真的，幸福快乐。</p><p>在某处，另一个你，留下了，<br>在那里，另一个我，微笑着。<br>另一个我们，还深爱着，代替我们永恒着，<br>如果能这么想，就够了。</p><p>无论是，后来故事，怎么了，<br>也要让，后来人生，值得。<br>后来的人生，我期待着，<br>泪水中能看到，你真的，自由了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;然后呢，他们说你的心，似乎痊愈了，&lt;br&gt;也开始有个人，为你守护着，&lt;br&gt;我该心安还是心痛呢？&lt;/p&gt;
&lt;p&gt;然后呢，其实我的日子也还可以呢，&lt;br&gt;除了回忆肆虐的某些时刻，&lt;br&gt;庆幸还有眼泪冲淡苦涩。&lt;/p&gt;
&lt;p&gt;而那些昨日，依然缤纷着，&lt;br&gt;它们都有我，细心收藏</summary>
      
    
    
    
    <category term="歌词" scheme="http://eryoung2.github.io/categories/%E6%AD%8C%E8%AF%8D/"/>
    
    
    <category term="五月天" scheme="http://eryoung2.github.io/tags/%E4%BA%94%E6%9C%88%E5%A4%A9/"/>
    
  </entry>
  
</feed>
